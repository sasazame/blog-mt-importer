version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: blog_mt_importer
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: blog_mt_importer
    ports:
      - "3000:3000"
    volumes:
      - ./exports:/app/exports
      - ./logs:/app/logs
    command: npm run start

  rss-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: blog_mt_importer
    volumes:
      - ./exports:/app/exports
      - ./logs:/app/logs
      - ./scripts/rss-scheduler/docker-crontab:/etc/cron.d/rss-import
    command: >
      sh -c "
        # Install cron
        apk add --no-cache supercronic &&
        # Create cron job
        echo '0 * * * * cd /app && npm run cli -- rss:import --all >> /app/logs/rss-import.log 2>&1' > /tmp/crontab &&
        # Run cron
        supercronic /tmp/crontab
      "

volumes:
  postgres_data: